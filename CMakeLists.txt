cmake_minimum_required(VERSION 3.0) # setting this is required
project(trello)            # this sets the project name

###############################################################################
## Qt #########################################################################
###############################################################################
# Find includes in corresponding build directories
set(CMAKE_INCLUDE_CURRENT_DIR ON)
# Instruct CMake to run moc automatically when needed.
set(CMAKE_AUTOMOC ON)

# Find the QtWidgets library
find_package(Qt5Widgets)
find_package(Qt5Network)
find_package(Qt5WebEngineWidgets)

###############################################################################
## file globbing ##############################################################
###############################################################################

# These instructions search the directory tree when cmake is
# invoked and put all files that match the pattern in the variables
# `sources` and `data`.
file(GLOB_RECURSE sources      src/*.cpp src/*.h)
# You can use set(sources src/main.cpp) etc if you don't want to
# use globbing to find files automatically.

###############################################################################
## target definitions #########################################################
###############################################################################

# The data is just added to the executable, because in some IDEs (QtCreator)
# files are invisible when they are not explicitly part of the project.
add_executable(trello ${sources})

# Just for example add some compiler flags.
target_compile_options(trello PUBLIC -std=c++1y -Wall -Wfloat-conversion)

# This allows to include files relative to the root of the src directory with a <> pair
target_include_directories(trello PUBLIC src/main)

target_link_libraries(trello Qt5::Widgets Qt5::Network Qt5::WebEngineWidgets)

# This copies all resource files in the build directory.
# We need this, because we want to work with paths relative to the executable.

###############################################################################
## dependencies ###############################################################
###############################################################################
add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/external/liboauthcpp/build/)
target_link_libraries(trello oauthcpp)
include_directories(trello
    PRIVATE
    ${CMAKE_CURRENT_SOURCE_DIR}/external/liboauthcpp/include/
)

###############################################################################
## packaging ##################################################################
###############################################################################

# All install commands get the same destination. this allows us to use paths
# relative to the executable.
install(TARGETS trello DESTINATION trello_destination)

# This is basically a repeat of the file copy instruction that copies the
# resources in the build directory, but here we tell cmake that we want it
# in the package.

# Now comes everything we need, to create a package
# there are a lot more variables you can set, and some
# you need to set for some package types, but we want to
# be minimal here.
set(CPACK_PACKAGE_NAME "trello")
set(CPACK_PACKAGE_VERSION "0.0.1")

# We don't want to split our program up into several incomplete pieces.
set(CPACK_MONOLITHIC_INSTALL 1)

# This must be last
include(CPack)
